<?xml version="1.0" encoding="UTF-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="atomex.Views.TezosTokens.TokenPage"
             xmlns:controls="clr-namespace:atomex.CustomElements"
             xmlns:helpers="clr-namespace:atomex.Helpers"
             xmlns:converters="clr-namespace:atomex.Converters"
             x:Name="BindingContextPage"
             Title="{Binding TokenContractName}">
    <ContentPage.Resources>
        <ResourceDictionary>
            <converters:StringToBoolConverter x:Key="StringToBool"/>
            <converters:StringToBoolConverterInvert x:Key="StringToBoolInvert"/>
            <converters:InverseBoolConverter x:Key="InverseBool"/>
            <converters:AllTrueMultiConverter x:Key="AllTrueConverter" />
        </ResourceDictionary>
    </ContentPage.Resources>
    <ContentPage.ToolbarItems>
        <ToolbarItem Text="{helpers:Translate Addresses}"
                     Order="Primary"
                     Priority="0"
                     Command="{Binding AddressesPageCommand}"/>
    </ContentPage.ToolbarItems>
    <StackLayout Spacing="0">
        <ListView ItemsSource="{Binding GroupedTransfers}"
                  Style="{DynamicResource TxListViewStyle}"
                  SelectionMode="None"
                  CachingStrategy="RetainElement"
                  RefreshCommand="{Binding UpdateTokensCommand}"
                  IsRefreshing="{Binding IsLoading}"
                  x:Name="TransfersListView"
                  Footer=""
                  IsVisible="{Binding IsFa12}">
        <ListView.Header> 
            <StackLayout Spacing="0"
                         BackgroundColor="{AppThemeBinding Dark={StaticResource AdditionalBackgroundColorDark}, Light={StaticResource AdditionalBackgroundColor}}">
                <StackLayout Style="{DynamicResource TokenHeaderLayoutStyle}">
                    <Frame Style="{DynamicResource TokenIconFrameStyle}">
                        <Image Style="{DynamicResource TokenIconStyle}"
                               Source="{Binding TokenContractIconUrl}"/>
                    </Frame>
                    <Label Text="{Binding Balance}"
                           FontSize="20"
                           FontFamily="{DynamicResource BoldFont}"
                           TextColor="{AppThemeBinding Dark={StaticResource MainTextColorDark}, Light={StaticResource MainTextColor}}"
                           LineBreakMode="WordWrap"
                           HorizontalOptions="Center">
                        <Label.IsVisible>
                            <MultiBinding Converter="{StaticResource AllTrueConverter}">
                                <Binding Path="TokenContract.IsFa12" Mode="OneWay" />
                                <Binding Path="IsLoading" Mode="OneWay" Converter="{StaticResource InverseBool}"/>
                            </MultiBinding>
                        </Label.IsVisible>
                        <Label.FormattedText>
                            <FormattedString>
                                <Span Text="{Binding Balance, StringFormat='{0:0.#########}'}"
                                      FontSize="20"
                                      FontFamily="{DynamicResource BoldFont}"/>
                                <Span Text=" " /> 
                                <Span Text="{Binding BalanceCurrencyCode}"
                                      FontSize="16"
                                      FontFamily="{DynamicResource BoldFont}"/>
                            </FormattedString>
                        </Label.FormattedText>
                    </Label>
                    <Label Text="{Binding TokenContractName}"
                           FontSize="20"
                           FontFamily="{DynamicResource BoldFont}"
                           TextColor="{AppThemeBinding Dark={StaticResource MainTextColorDark}, Light={StaticResource MainTextColor}}"
                           LineBreakMode="WordWrap"
                           HorizontalOptions="Center">
                        <Label.IsVisible>
                            <MultiBinding Converter="{StaticResource AllTrueConverter}">
                                <Binding Path="TokenContract.IsFa2" Mode="OneWay" />
                                <Binding Path="IsLoading" Mode="OneWay" Converter="{StaticResource InverseBool}"/>
                            </MultiBinding>
                        </Label.IsVisible>
                    </Label>
                    <Label Text="{Binding TokenContractAddress}"
                           FontFamily="{DynamicResource RegularFont}"
                           FontSize="14"
                           TextColor="{AppThemeBinding Dark={StaticResource AdditionalTextColorDark}, Light={StaticResource AdditionalTextColor}}"
                           LineBreakMode="MiddleTruncation"
                           VerticalTextAlignment="Start"
                           HorizontalOptions="Center"
                           IsVisible="{Binding IsLoading, Mode=OneWay, Converter={StaticResource InverseBool}}"/>
                    <Label Text="{helpers:Translate TokenBalanceUpdatingLabel}"
                           Style="{DynamicResource RefreshLabelStyle}"
                           IsVisible="{Binding IsLoading}"/>
                    <StackLayout Style="{DynamicResource TokenActionButtonsLayoutStyle}">
                        <controls:LeftRoundedButton Text="{helpers:Translate ReceiveButton}"
                                                    Style="{DynamicResource TokenActionButtonStyle}"
                                                    Command="{Binding ReceivePageCommand}"/>
                        <Button Text="{helpers:Translate SendButton}"
                                Style="{DynamicResource TokenActionButtonStyle}"
                                Command="{Binding SendPageCommand}"
                                IsVisible="{Binding IsFa12}"/>
                        <Button Text="{helpers:Translate ConvertButton}"
                                Style="{DynamicResource TokenActionButtonStyle}"
                                Command="{Binding ConvertPageCommand}"
                                IsVisible="{Binding IsConvertable}"/>
                        <controls:RightRoundedButton Text="{helpers:Translate UpdateButton}"
                                                     Style="{DynamicResource TokenActionButtonStyle}"
                                                     Command="{Binding UpdateTokensCommand}"/>
                    </StackLayout>
                </StackLayout>
                <StackLayout Style="{DynamicResource SeparatorStyle}"
                             BackgroundColor="{AppThemeBinding Dark={StaticResource ListViewSelectedBackgroundColorDark}, Light={StaticResource ListViewSelectedBackgroundColor}}"
                             HeightRequest="1"/>
                <Grid HorizontalOptions="FillAndExpand"
                      VerticalOptions="FillAndExpand"
                      ColumnSpacing="0"
                      RowSpacing="0"
                      BackgroundColor="{AppThemeBinding Dark={StaticResource MainBackgroundColorDark}, Light={StaticResource MainBackgroundColor}}"
                      IsVisible="{Binding IsFa2}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="40" />
                        <RowDefinition Height="1" />
                        <RowDefinition Height="1" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="5*" />
                        <ColumnDefinition Width="5*" />
                    </Grid.ColumnDefinitions>
                    <Button Clicked="OnTokensButtonClicked"
                            CornerRadius="0"
                            Text="{helpers:Translate Tokens}"
                            TextColor="{AppThemeBinding Dark={StaticResource DisabledButtonTextColorDark}, Light={StaticResource DisabledButtonTextColor}}"/>
                    <Button Clicked="OnTransfersButtonClicked"
                            Grid.Column="1"
                            CornerRadius="0"
                            Text="{helpers:Translate Transfers}"
                            TextColor="{AppThemeBinding Dark={StaticResource HintTextColorDark}, Light={StaticResource HintTextColor}}"/>
                    <StackLayout Grid.Row="2"
                                 Style="{DynamicResource SeparatorStyle}"
                                 BackgroundColor="{AppThemeBinding Dark={StaticResource ListViewSelectedBackgroundColorDark}, Light={StaticResource ListViewSelectedBackgroundColor}}"/>
                    <StackLayout Grid.Row="1"
                                 Grid.Column="1"
                                 Style="{DynamicResource SeparatorStyle}"
                                 BackgroundColor="{AppThemeBinding Dark={StaticResource HintTextColorDark}, Light={StaticResource HintTextColor}}"/>
                    <StackLayout Grid.Row="2"
                                 Grid.Column="1"
                                 Style="{DynamicResource SeparatorStyle}"
                                 BackgroundColor="{AppThemeBinding Dark={StaticResource HintTextColorDark}, Light={StaticResource HintTextColor}}"/>
                </Grid>
                <StackLayout IsVisible="False"
                             BackgroundColor="{AppThemeBinding Dark={StaticResource MainBackgroundColorDark}, Light={StaticResource MainBackgroundColor}}"
                             VerticalOptions="FillAndExpand">
                    <StackLayout.Triggers>
                        <DataTrigger TargetType="StackLayout"
                                     Binding="{Binding GroupedTransfers.Count}"
                                     Value="0">
                            <Setter Property="IsVisible"
                                    Value="True"/>
                        </DataTrigger>
                    </StackLayout.Triggers>
                    <Image Source="Magnifier"
                           WidthRequest="45"
                           HeightRequest="45"
                           Margin="20,40,20,10"
                           VerticalOptions="CenterAndExpand"/>
                    <Label Text="{helpers:Translate NoTransfersLabel}"
                           FontFamily="{DynamicResource RegularFont}"
                           TextColor="{AppThemeBinding Dark={StaticResource AdditionalTextColorDark}, Light={StaticResource AdditionalTextColor}}"
                           FontSize="18"
                           HorizontalTextAlignment="Center"
                           VerticalTextAlignment="Start"/>
                    <RelativeLayout Style="{DynamicResource UpdateButtonLayoutStyle}"
                                    HorizontalOptions="Center">
                        <Button Text="{helpers:Translate UpdateButton}"
                                Style="{DynamicResource TokenActionButtonStyle}"
                                Opacity="{Binding Opacity}"
                                CornerRadius="20"
                                RelativeLayout.WidthConstraint="80"
                                RelativeLayout.HeightConstraint="40"
                                Command="{Binding UpdateTokensCommand}"/>
                        <ActivityIndicator RelativeLayout.XConstraint= "{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0, Constant=30}"
	             	                       RelativeLayout.YConstraint="{ConstraintExpression Type=RelativeToParent, Property=Height, Factor=0, Constant=10}"
                                           RelativeLayout.WidthConstraint="20"
                                           RelativeLayout.HeightConstraint="20"
                                           BackgroundColor="Transparent"
                                           IsVisible="{Binding IsLoading}"
                                           IsRunning="{Binding IsLoading}"
                                           Color="{AppThemeBinding Dark={StaticResource LoaderColorDark}, Light=Black}"/>
                    </RelativeLayout>
                </StackLayout>
            </StackLayout>
        </ListView.Header>
        <ListView.GroupHeaderTemplate>
            <DataTemplate>
                <ViewCell Height="20">
                    <StackLayout HeightRequest="20"
                                 BackgroundColor="{AppThemeBinding Dark={StaticResource AdditionalBackgroundColorDark}, Light={StaticResource AdditionalBackgroundColor}}"
                                 Spacing="0">
                        <Label Text="{Binding Date, StringFormat='{}{0:dd.MM.yyyy}'}"
                               BackgroundColor="{AppThemeBinding Dark={StaticResource AdditionalBackgroundColorDark}, Light={StaticResource AdditionalBackgroundColor}}"
                               TextColor="{AppThemeBinding Dark={StaticResource AdditionalTextColorDark}, Light={StaticResource AdditionalTextColor}}"
                               FontFamily="{DynamicResource RegularFont}"
                               Padding="10,0"
                               FontSize="12"
                               VerticalTextAlignment="Center"
                               VerticalOptions="CenterAndExpand"/>
                    </StackLayout>
                </ViewCell>
            </DataTemplate>
        </ListView.GroupHeaderTemplate>
        <ListView.ItemTemplate>
            <DataTemplate>
                <ViewCell>
                    <Grid RowSpacing="0"
                          ColumnSpacing="0"
                          VerticalOptions="Center"
                          BackgroundColor="{AppThemeBinding Dark={StaticResource MainBackgroundColorDark}, Light={StaticResource MainBackgroundColor}}">
                        <Grid.GestureRecognizers>
                            <TapGestureRecognizer Command="{Binding BindingContext.SelectTransferCommand, Source={x:Reference BindingContextPage}}"
                                                  Tapped="OnListItemTapped"
                                                  CommandParameter="{Binding .}"/>
                        </Grid.GestureRecognizers>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30" />
                            <RowDefinition Height="30" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="60" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.Triggers>
                            <DataTrigger TargetType="Grid"
                                         Binding="{Binding State}"
                                         Value="Confirmed">
                                <Setter Property="BackgroundColor"
                                        Value="{DynamicResource TxListViewConfirmedStateColor}"/>
                            </DataTrigger>
                            <DataTrigger TargetType="Grid"
                                         Binding="{Binding State}"
                                         Value="Pending">
                                <Setter Property="BackgroundColor"
                                        Value="{DynamicResource TxListViewPendingStateColor}"/>
                            </DataTrigger>
                            <DataTrigger TargetType="Grid"
                                         Binding="{Binding State}"
                                         Value="Failed">
                                <Setter Property="BackgroundColor"
                                        Value="{DynamicResource TxListViewFailedStateColor}"/>
                            </DataTrigger>
                            <DataTrigger TargetType="Grid"
                                         Binding="{Binding State}"
                                         Value="Unconfirmed">
                                <Setter Property="BackgroundColor"
                                        Value="{DynamicResource TxListViewPendingStateColor}"/>
                            </DataTrigger>
                            <DataTrigger TargetType="Grid"
                                         Binding="{Binding State}"
                                         Value="Unknown">
                                <Setter Property="BackgroundColor"
                                        Value="{DynamicResource TxListViewPendingStateColor}"/>
                            </DataTrigger>
                        </Grid.Triggers>
                        <Image Grid.RowSpan="2"
                               Margin="10,15">
                            <Image.Triggers>
                                <DataTrigger TargetType="Image"
                                             Binding="{Binding Type}"
                                             Value="Input">
                                    <Setter Property="Source"
                                            Value="ic_input"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Image"
                                             Binding="{Binding Type}"
                                             Value="Output">
                                    <Setter Property="Source"
                                            Value="ic_output"/>
                                </DataTrigger>
                            </Image.Triggers>
                        </Image>
                        <Label Grid.Column="1"
                               Grid.ColumnSpan="2"
                               FontFamily="{DynamicResource RegularFont}"
                               TextColor="{AppThemeBinding Dark={StaticResource MainTextColorDark}, Light={StaticResource MainTextColor}}"
                               FontSize="14"
                               VerticalTextAlignment="End"
                               HorizontalTextAlignment="Start">
                            <Label.Triggers>
                                <DataTrigger TargetType="Label"
                                             Binding="{Binding Type}"
                                             Value="Output">
                                    <Setter Property="Text"
                                            Value="{helpers:Translate TxSent}"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Label"
                                             Binding="{Binding Type}"
                                             Value="Input">
                                    <Setter Property="Text"
                                            Value="{helpers:Translate TxReceived}"/>
                                </DataTrigger>
                            </Label.Triggers>
                        </Label>
                        <Label Grid.Column="3"
                               Grid.RowSpan="2"
                               HorizontalTextAlignment="End"
                               VerticalTextAlignment="Center"
                               Padding="10,0">
                            <Label.Triggers>
                                <DataTrigger TargetType="Label"
                                             Binding="{Binding Type}"
                                             Value="Input">
                                    <Setter Property="TextColor"
                                            Value="{AppThemeBinding Dark={StaticResource SuccessTextColorDark}, Light={StaticResource SuccessTextColor}}"/>
                                    <Setter Property="FormattedText">
                                        <Setter.Value>
                                            <FormattedString>
                                                <Span Text="{Binding Amount, StringFormat='+{0:0.#####}'}"
                                                      FontFamily="{DynamicResource RegularFont}"
                                                      FontSize="14"/>
                                                <Span Text=" "/>
                                                <Span Text="{Binding CurrencyCode}"
                                                      FontFamily="{DynamicResource RegularFont}"
                                                      FontSize="12"/>
                                            </FormattedString>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                                <DataTrigger TargetType="Label"
                                             Binding="{Binding Type}"
                                             Value="Output">
                                    <Setter Property="TextColor"
                                            Value="{AppThemeBinding Dark={StaticResource ErrorTextColorDark}, Light={StaticResource ErrorTextColor}}"/>
                                    <Setter Property="FormattedText">
                                        <Setter.Value>
                                            <FormattedString>
                                                <Span Text="{Binding Amount, StringFormat='{0:0.#####}'}"
                                                      FontFamily="{DynamicResource RegularFont}"
                                                      FontSize="14"/>
                                                <Span Text=" "/>
                                                <Span Text="{Binding CurrencyCode}"
                                                      FontFamily="{DynamicResource RegularFont}"
                                                      FontSize="12"/>
                                            </FormattedString>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                            </Label.Triggers>
                        </Label>
                        <Label Grid.Row="1"
                               Grid.Column="1"
                               VerticalTextAlignment="Start"
                               HorizontalTextAlignment="Start"
                               FontFamily="{DynamicResource LightFont}"
                               TextColor="{AppThemeBinding Dark={StaticResource AdditionalTextColorDark}, Light={StaticResource AdditionalTextColor}}"
                               FontSize="12">
                            <Label.Triggers>
                                <DataTrigger TargetType="Label"
                                             Binding="{Binding Type}"
                                             Value="Output">
                                    <Setter Property="Text" Value="{helpers:Translate ToLabel, StringFormat='{0}:'}"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Label"
                                             Binding="{Binding Type}"
                                             Value="Input">
                                    <Setter Property="Text" Value="{helpers:Translate FromLabel, StringFormat='{0}:'}"/>
                                </DataTrigger>
                            </Label.Triggers>
                        </Label>
                        <Label Grid.Row="1"
                               Grid.Column="2"
                               VerticalTextAlignment="Start"
                               FontFamily="{DynamicResource LightFont}"
                               TextColor="{AppThemeBinding Dark={StaticResource AdditionalTextColorDark}, Light={StaticResource AdditionalTextColor}}"
                               FontSize="12"
                               Padding="3,0"
                               LineBreakMode="MiddleTruncation"
                               IsVisible="{Binding Alias, Mode=OneWay, Converter={StaticResource StringToBoolInvert}}">
                            <Label.Triggers>
                                <DataTrigger TargetType="Label"
                                             Binding="{Binding Type}"
                                             Value="Output">
                                    <Setter Property="Text" Value="{Binding To, FallbackValue='Unknown'}"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Label"
                                             Binding="{Binding Type}"
                                             Value="Input">
                                    <Setter Property="Text" Value="{Binding From, FallbackValue='Unknown'}"/>
                                </DataTrigger>
                            </Label.Triggers>
                        </Label>
                        <Label Grid.Row="1"
                               Grid.Column="2"
                               Text="{Binding Alias}"
                               VerticalTextAlignment="Start"
                               HorizontalTextAlignment="Start"
                               LineBreakMode="TailTruncation"
                               TextColor="{AppThemeBinding Dark={StaticResource HintTextColorDark}, Light={StaticResource HintTextColor}}"
                               FontFamily="{DynamicResource LightFont}"
                               FontSize="12"
                               Padding="3,0"
                               IsVisible="{Binding Alias, Mode=OneWay, Converter={StaticResource StringToBool}, FallbackValue='False'}"/>
                    </Grid>
                </ViewCell>
            </DataTemplate>
        </ListView.ItemTemplate>
    </ListView>
    <ListView ItemsSource="{Binding Tokens}"
              Style="{DynamicResource TxListViewStyle}"
              SelectionMode="None"
              CachingStrategy="RetainElement"
              RefreshCommand="{Binding UpdateTokensCommand}"
              IsRefreshing="{Binding IsLoading}"
              x:Name="TokensListView"
              IsGroupingEnabled="False"
              Footer=""
              IsVisible="{Binding TokenContract.IsFa2}">
        <ListView.Header> 
            <StackLayout Spacing="0"
                         BackgroundColor="{AppThemeBinding Dark={StaticResource AdditionalBackgroundColorDark}, Light={StaticResource AdditionalBackgroundColor}}">
                <StackLayout Style="{DynamicResource TokenHeaderLayoutStyle}">
                    <Frame Style="{DynamicResource TokenIconFrameStyle}">
                        <Image Style="{DynamicResource TokenIconStyle}"
                               Source="{Binding TokenContractIconUrl}"/>
                    </Frame>
                    <Label Text="{Binding TokenContractName}"
                           FontSize="20"
                           FontFamily="{DynamicResource BoldFont}"
                           TextColor="{AppThemeBinding Dark={StaticResource MainTextColorDark}, Light={StaticResource MainTextColor}}"
                           LineBreakMode="WordWrap"
                           HorizontalOptions="Center"
                           IsVisible="{Binding IsLoading, Mode=OneWay, Converter={StaticResource InverseBool}}"/>
                    <Label Text="{Binding TokenContractAddress}"
                           FontFamily="{DynamicResource RegularFont}"
                           FontSize="14"
                           TextColor="{AppThemeBinding Dark={StaticResource AdditionalTextColorDark}, Light={StaticResource AdditionalTextColor}}"
                           LineBreakMode="MiddleTruncation"
                           VerticalTextAlignment="Start"
                           HorizontalOptions="Center"
                           IsVisible="{Binding IsLoading, Mode=OneWay, Converter={StaticResource InverseBool}}"/>
                    <Label Text="{helpers:Translate TokenBalanceUpdatingLabel}"
                           Style="{DynamicResource RefreshLabelStyle}"
                           IsVisible="{Binding IsLoading}"/>
                    <StackLayout Style="{DynamicResource TokenActionButtonsLayoutStyle}">
                        <controls:LeftRoundedButton Text="{helpers:Translate ReceiveButton}"
                                                    Style="{DynamicResource TokenActionButtonStyle}"
                                                    Command="{Binding ReceivePageCommand}"/>
                        <Button Text="{helpers:Translate SendButton}"
                                Style="{DynamicResource TokenActionButtonStyle}"
                                Command="{Binding SendPageCommand}"
                                IsVisible="{Binding IsFa12}"/>
                        <Button Text="{helpers:Translate ConvertButton}"
                                Style="{DynamicResource TokenActionButtonStyle}"
                                Command="{Binding ConvertPageCommand}"
                                IsVisible="{Binding IsConvertable}"/>
                        <controls:RightRoundedButton Text="{helpers:Translate UpdateButton}"
                                                     Style="{DynamicResource TokenActionButtonStyle}"
                                                     Command="{Binding UpdateTokensCommand}"/>
                    </StackLayout>
                </StackLayout>
                <StackLayout Style="{DynamicResource SeparatorStyle}"
                             BackgroundColor="{AppThemeBinding Dark={StaticResource ListViewSelectedBackgroundColorDark}, Light={StaticResource ListViewSelectedBackgroundColor}}"
                             HeightRequest="1"/>
                <Grid HorizontalOptions="FillAndExpand"
                      VerticalOptions="FillAndExpand"
                      ColumnSpacing="0"
                      RowSpacing="0"
                      BackgroundColor="{AppThemeBinding Dark={StaticResource MainBackgroundColorDark}, Light={StaticResource MainBackgroundColor}}"
                      IsVisible="{Binding IsFa2}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="40" />
                        <RowDefinition Height="1" />
                        <RowDefinition Height="1" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="5*" />
                        <ColumnDefinition Width="5*" />
                    </Grid.ColumnDefinitions>
                    <Button Clicked="OnTokensButtonClicked"
                            CornerRadius="0"
                            Text="{helpers:Translate Tokens}"
                            TextColor="{AppThemeBinding Dark={StaticResource HintTextColorDark}, Light={StaticResource HintTextColor}}"/>
                    <Button Clicked="OnTransfersButtonClicked"
                            Grid.Column="1"
                            CornerRadius="0"
                            Text="{helpers:Translate Transfers}"
                            TextColor="{AppThemeBinding Dark={StaticResource DisabledButtonTextColorDark}, Light={StaticResource DisabledButtonTextColor}}"/>
                    <StackLayout Grid.Row="1"
                                 Style="{DynamicResource SeparatorStyle}"
                                 BackgroundColor="{AppThemeBinding Dark={StaticResource HintTextColorDark}, Light={StaticResource HintTextColor}}"/>
                    <StackLayout Grid.Row="2"
                                 Style="{DynamicResource SeparatorStyle}"
                                 BackgroundColor="{AppThemeBinding Dark={StaticResource HintTextColorDark}, Light={StaticResource HintTextColor}}"/>
                    <StackLayout Grid.Row="2"
                                 Grid.Column="1"
                                 Style="{DynamicResource SeparatorStyle}"
                                 BackgroundColor="{AppThemeBinding Dark={StaticResource ListViewSelectedBackgroundColorDark}, Light={StaticResource ListViewSelectedBackgroundColor}}"/>
                </Grid>
                <StackLayout IsVisible="False"
                             BackgroundColor="{AppThemeBinding Dark={StaticResource MainBackgroundColorDark}, Light={StaticResource MainBackgroundColor}}"
                             VerticalOptions="FillAndExpand">
                    <StackLayout.Triggers>
                        <DataTrigger TargetType="StackLayout"
                                     Binding="{Binding Tokens.Count}"
                                     Value="0">
                            <Setter Property="IsVisible"
                                    Value="True"/>
                        </DataTrigger>
                    </StackLayout.Triggers>
                    <Image Source="Magnifier"
                           WidthRequest="45"
                           HeightRequest="45"
                           Margin="20,40,20,10"
                           VerticalOptions="CenterAndExpand"/>
                    <Label Text="{helpers:Translate NoTokensLabel}"
                           FontFamily="{DynamicResource RegularFont}"
                           TextColor="{AppThemeBinding Dark={StaticResource AdditionalTextColorDark}, Light={StaticResource AdditionalTextColor}}"
                           FontSize="18"
                           HorizontalTextAlignment="Center"
                           VerticalTextAlignment="Start"/>
                    <RelativeLayout Style="{DynamicResource UpdateButtonLayoutStyle}"
                                    HorizontalOptions="Center">
                        <Button Text="{helpers:Translate UpdateButton}"
                                Style="{DynamicResource TokenActionButtonStyle}"
                                Opacity="{Binding Opacity}"
                                CornerRadius="20"
                                RelativeLayout.WidthConstraint="80"
                                RelativeLayout.HeightConstraint="40"
                                Command="{Binding UpdateTokensCommand}"/>
                        <ActivityIndicator RelativeLayout.XConstraint= "{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0, Constant=30}"
	             	                       RelativeLayout.YConstraint="{ConstraintExpression Type=RelativeToParent, Property=Height, Factor=0, Constant=10}"
                                           RelativeLayout.WidthConstraint="20"
                                           RelativeLayout.HeightConstraint="20"
                                           BackgroundColor="Transparent"
                                           IsVisible="{Binding IsLoading}"
                                           IsRunning="{Binding IsLoading}"
                                           Color="{AppThemeBinding Dark={StaticResource LoaderColorDark}, Light=Black}"/>
                    </RelativeLayout>
                </StackLayout>
            </StackLayout>
        </ListView.Header>
        <ListView.ItemTemplate>
            <DataTemplate>
                <ViewCell>
                    <Grid RowSpacing="0"
                          ColumnSpacing="0"
                          VerticalOptions="Center"
                          BackgroundColor="{AppThemeBinding Dark={StaticResource MainBackgroundColorDark}, Light={StaticResource MainBackgroundColor}}">
                        <Grid.GestureRecognizers>
                            <TapGestureRecognizer Command="{Binding BindingContext.SelectTokenCommand, Source={x:Reference BindingContextPage}}"
                                                  Tapped="OnListItemTapped"
                                                  CommandParameter="{Binding .}"/>
                        </Grid.GestureRecognizers>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="60" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="60" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="80" />
                        </Grid.ColumnDefinitions>
                        <Frame Padding="0"
                               CornerRadius="20"
                               HasShadow="False"
                               VerticalOptions="CenterAndExpand"
                               HorizontalOptions="CenterAndExpand"
                               IsClippedToBounds="True">
                            <Image Source="{Binding TokenPreview}"
                                   WidthRequest="40"
                                   HeightRequest="40"/>
                        </Frame>
                        <Label Grid.Column="1"
                               Text="{Binding TokenBalance.Name}"
                               FontFamily="{DynamicResource RegularFont}"
                               TextColor="{AppThemeBinding Dark={StaticResource MainTextColorDark}, Light={StaticResource MainTextColor}}"
                               FontSize="14"
                               Margin="0,0,10,0"
                               LineBreakMode="TailTruncation"
                               VerticalTextAlignment="Center"
                               HorizontalTextAlignment="Start"/>
                        <Label Grid.Column="2"
                               TextColor="{AppThemeBinding Dark={StaticResource WarningTextColorDark}, Light={StaticResource WarningTextColor}}"
                               Margin="0,0,10,0"
                               VerticalTextAlignment="Center"
                               HorizontalTextAlignment="Start">
                            <Label.Triggers>
                                <DataTrigger TargetType="Label"
                                             Binding="{Binding Balance}"
                                             Value="1">
                                    <Setter Property="IsVisible"
                                            Value="False"/>
                                </DataTrigger>
                            </Label.Triggers>
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span Text="{Binding Balance, StringFormat='{0:0.#####}'}"
                                          FontFamily="{DynamicResource RegularFont}"
                                          FontSize="14"/>
                                    <Span Text=" "/>
                                    <Span Text="{Binding Symbol}"
                                          FontFamily="{DynamicResource RegularFont}"
                                          FontSize="12"/>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>
                        <Button Grid.Column="3"
                                Text="{helpers:Translate SendButton}"
                                Style="{DynamicResource TokenActionButtonStyle}"
                                CornerRadius="15"
                                HeightRequest="20"
                                Margin="0,15,10,15"
                                Command="{Binding BindingContext.SendFa2PageCommand, Source={x:Reference BindingContextPage}}"
                                CommandParameter="{Binding .}"/>
                    </Grid>
                </ViewCell>
            </DataTemplate>
        </ListView.ItemTemplate>
    </ListView>
    </StackLayout>
</ContentPage>
